/**
 * This script automatically generates imports for question files in session directories.
 * Run this script whenever you add new question files to keep the imports up to date.
 * 
 * Usage: npm run update-questions
 */

const fs = require('fs');
const path = require('path');

// Base directory for years and sessions
const BASE_DIR = path.join(__dirname, '..', 'src', 'app', 'practical', 'years');

// Process all year directories
const yearDirs = fs.readdirSync(BASE_DIR);

yearDirs.forEach(yearDir => {
  const yearPath = path.join(BASE_DIR, yearDir);
  
  // Skip if not a directory
  if (!fs.statSync(yearPath).isDirectory()) return;
    // Find all question folders and session files
  updateIndividualSessionFiles(yearPath);
  
  // Check if we should create/update year file
  const questionDirs = fs.readdirSync(yearPath)
    .filter(dir => dir.endsWith('_questions') && fs.statSync(path.join(yearPath, dir)).isDirectory());
  
  if (questionDirs.length > 0) {
    generateYearFile(yearPath, questionDirs);
  }
});

/**
 * Process individual session files and update their imports
 */
function updateIndividualSessionFiles(yearPath) {
  const files = fs.readdirSync(yearPath);
  
  files.forEach(file => {
    if (file.startsWith('session') && file.endsWith('.ts')) {
      // Check if the session has a corresponding questions directory
      const sessionName = file.replace('.ts', '');
      const questionDirPath = path.join(yearPath, `${sessionName}_questions`);
      
      if (fs.existsSync(questionDirPath) && fs.statSync(questionDirPath).isDirectory()) {
        // Found a session with a questions directory, process it
        processSessionFile(yearPath, file, questionDirPath);
      }
    }
  });
}

/**
 * Process a session file and update its imports
 */
function processSessionFile(yearPath, sessionFile, questionDirPath) {
  const sessionFilePath = path.join(yearPath, sessionFile);
  const questionFiles = fs.readdirSync(questionDirPath)
    .filter(file => file.endsWith('.ts'));
  
  if (questionFiles.length === 0) return;
  
  // Generate import statements
  const imports = questionFiles.map((file, index) => {
    const questionName = file.replace('.ts', '');
    return `import { question as ${questionName} } from './${sessionFile.replace('.ts', '')}_questions/${questionName}';`;
  }).join('\n');
  
  // Generate array items
  const arrayItems = questionFiles.map(file => {
    const questionName = file.replace('.ts', '');
    return `  ${questionName},`;
  }).join('\n');
  
  // Read the existing session file content
  let content = fs.readFileSync(sessionFilePath, 'utf8');
  
  // Create the updated content
  const updatedContent = `import { Question } from '@/app/practical/types';

// Import all question modules
${imports}

// This array will automatically include all questions you've imported above
// When adding a new question, run the generate-question-imports.js script
export const questions: Question[] = [
${arrayItems}
  // Add more imported questions here as needed
].sort((a, b) => a.id - b.id); // Sort by question ID

// Note: This file was auto-generated by scripts/generate-question-imports.js
// Do not edit the imports or questions array manually.
// Add new questions by creating files in the ${sessionFile.replace('.ts', '')}_questions directory
// and then run the script to update this file.
`;

  // Write the updated content back to the file
  fs.writeFileSync(sessionFilePath, updatedContent);
  console.log(`Updated ${sessionFilePath}`);
}

/**
 * Generate or update the year file for a year directory
 */
function generateYearFile(yearPath, questionDirs) {
  // Use the yearDir name for the file
  const yearName = path.basename(yearPath);
  const combinedFilePath = path.join(yearPath, `${yearName}.ts`);
  
  // Extract session numbers from directory names
  const sessionNumbers = questionDirs.map(dir => {
    const match = dir.match(/session(\d+)_questions/);
    return match ? match[1] : null;
  }).filter(Boolean);
  
  // Map each directory to its question files
  const sessionMap = {};
  
  questionDirs.forEach(dir => {
    const sessionMatch = dir.match(/session(\d+)_questions/);
    if (sessionMatch) {
      const sessionNumber = sessionMatch[1];
      const dirPath = path.join(yearPath, dir);
      
      const questionFiles = fs.readdirSync(dirPath)
        .filter(file => file.endsWith('.ts'))
        .map(file => file.replace('.ts', ''));
      
      sessionMap[sessionNumber] = {
        dirName: dir,
        questions: questionFiles
      };
    }
  });
  
  // Generate import statements for each session
  let imports = '';
  let sessionGroups = '';
  let allQuestionsArray = '';
  
  Object.keys(sessionMap).sort().forEach(sessionNumber => {
    const sessionInfo = sessionMap[sessionNumber];
    const sessionImports = sessionInfo.questions.map(questionName => {
      return `import { question as session${sessionNumber}${questionName.charAt(0).toUpperCase() + questionName.slice(1)} } from './${sessionInfo.dirName}/${questionName}';`;
    }).join('\n');
    
    imports += `// Import all question modules from session${sessionNumber}\n${sessionImports}\n\n`;
    
    const questionsArray = sessionInfo.questions.map(questionName => {
      return `  session${sessionNumber}${questionName.charAt(0).toUpperCase() + questionName.slice(1)},`;
    }).join('\n');
    
    sessionGroups += `export const session${sessionNumber}Questions: Question[] = [\n${questionsArray}\n].map(q => addSessionInfo(q, ${sessionNumber})).sort((a, b) => a.id - b.id);\n\n`;
    
  allQuestionsArray += `  ...session${sessionNumber}Questions,\n`;
  });
  
  // Create the content for the year file
  const yearFileContent = `import { Question } from '@/app/practical/types';

${imports}// Helper function to add session information to question text
const addSessionInfo = (question: Question, sessionNumber: number): Question => {
  // Create a new object (don't modify the original)
  return {
    ...question,
    // Add session to the ID to ensure uniqueness
    id: sessionNumber * 100 + question.id,
    // Add session number to the text if it's not already there
    text: question.text.includes(\`Session \${sessionNumber}:\`) 
      ? question.text 
      : \`Session \${sessionNumber}: \${question.text}\`
  };
};

// Group questions by session
${sessionGroups}// Combine all questions into a single array
export const allQuestions: Question[] = [
${allQuestionsArray}].sort((a, b) => a.id - b.id);

// For backward compatibility, export the original arrays as well
export const questions = allQuestions;`;

  // Write the content to the file
  fs.writeFileSync(combinedFilePath, yearFileContent);
  console.log(`Updated ${combinedFilePath}`);
}

console.log('Finished updating question imports!');
